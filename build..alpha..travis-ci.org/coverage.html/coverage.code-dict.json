{"/home/travis/build/npmtest/node-npmtest-grunt-run/test.js":"/* istanbul instrument in package npmtest_grunt_run */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-run/lib.npmtest_grunt_run.js":"/* istanbul instrument in package npmtest_grunt_run */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_grunt_run = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_grunt_run = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-run/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-grunt-run && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_grunt_run */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_grunt_run\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_grunt_run.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_grunt_run.rollup.js'] =\n            local.assetsDict['/assets.npmtest_grunt_run.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_grunt_run.__dirname + '/lib.npmtest_grunt_run.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-run/node_modules/grunt-run/Gruntfile.js":"/*\n * grunt-run\n * https://github.com/spenceralger/grunt-run\n *\n * Copyright (c) 2013 Spencer Alger\n * Licensed under the MIT license.\n */\n\n'use strict';\n\nmodule.exports = function(grunt) {\n\n  // Project configuration.\n  grunt.initConfig({\n    jshint: {\n      all: [\n        'Gruntfile.js',\n        'tasks/*.js'\n      ],\n      options: {\n        jshintrc: '.jshintrc',\n      },\n    }\n  });\n\n  // These plugins provide necessary tasks.\n  grunt.loadNpmTasks('grunt-contrib-jshint');\n\n  // By default, lint\n  grunt.registerTask('default', ['jshint']);\n\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-run/node_modules/grunt-run/tasks/run.js":"/*\n * grunt-run\n * https://github.com/spenceralger/grunt-run\n *\n * Copyright (c) 2013 Spencer Alger\n * Licensed under the MIT license.\n */\nmodule.exports = makeTask;\nfunction makeTask(grunt) {\n  var _ = require('lodash');\n  var util = require('util');\n  var stripAnsi = require('strip-ansi');\n  var child_process = require('child_process');\n\n  var shouldEscapeRE = / |\"|'|\\$|&|\\\\/;\n  var dangerArgsRE = /\"|\\$|\\\\/g;\n  var runningProcs = [];\n\n  process.on('exit', function () {\n    _.invoke(runningProcs, 'kill');\n  });\n\n  function getPid(name) {\n    return grunt.config.get('stop.' + grunt.config.escape(name) + '._pid');\n  }\n\n  function savePid(name, pid) {\n    grunt.config.set('stop.' + grunt.config.escape(name) + '._pid', pid);\n    grunt.config.set('wait.' + grunt.config.escape(name) + '._pid', pid);\n  }\n\n  function clearPid(name) {\n    grunt.config.set('stop.' + grunt.config.escape(name) + '._pid', null);\n    grunt.config.set('wait.' + grunt.config.escape(name) + '._pid', null);\n  }\n\n  grunt.task.registerMultiTask('run', 'used to start external processes (like servers)', function (keepalive) {\n    var self = this;\n    var name = this.target;\n    var cmd = this.data.cmd || 'node';\n    var args = this.data.args || [];\n    var additionalArgs = [];\n    var opts = this.options({\n      wait: true,\n      failOnError: false,\n      quite: false,\n      ready: 1000,\n      cwd: process.cwd(),\n      passArgs: [],\n      itterable: false,\n      readyBufferLength: 1024\n    });\n\n    if (keepalive === 'keepalive') {\n      // override the wait setting\n      opts.wait = true;\n    }\n\n    var spawnOpts = {\n      cwd: opts.cwd,\n      stdio: ['ignore', 'pipe', 'pipe']\n    };\n\n    if (opts.env) {\n      spawnOpts.env = opts.env;\n    }\n\n    var pid = getPid(name);\n    if (pid && _.find(runningProcs, { pid: pid })) {\n      grunt.log.warn(name + ' is already running');\n      return;\n    }\n\n    if (!opts.itterable && _.contains(process.argv, 'run')) {\n      grunt.log.warn('Skipping run:' + this.target + ' since it not itterable. Call it directly or from another task.');\n      return;\n    }\n\n    opts.passArgs.map(function (arg) {\n      var val = grunt.option(arg);\n\n      if (val !== void 0) {\n        if (shouldEscapeRE.test(arg)) {\n          val = '\"' + arg.replace(dangerArgsRE, function (match) {\n            return '\\\\' + match;\n          }) + '\"';\n        }\n\n        additionalArgs.push('--' + arg + '=' + val);\n      }\n    });\n\n    if (this.data.exec) {\n      // logic is from node's cp.exec method, adapted to benefit from\n      // streaming io\n      if (process.platform === 'win32') {\n        cmd = 'cmd.exe';\n        args = ['/s', '/c', '\"' + this.data.exec + '\"'];\n        spawnOpts.windowsVerbatimArguments = true;\n      } else {\n        cmd = '/bin/sh';\n        args = ['-c', this.data.exec];\n      }\n\n      if (additionalArgs.length) {\n        if(process.platform === 'win32') {\n          args[2]+= ' ' + additionalArgs.join(' ');\n        } else {\n          args[1]+= ' ' + additionalArgs.join(' ');\n        }\n      }\n    } else {\n      args = args.concat(additionalArgs);\n    }\n\n    grunt.verbose.writeln('running', cmd, 'with args', args);\n    var proc = child_process.spawn(cmd, args, spawnOpts);\n    savePid(name, proc.pid);\n\n    var done = this.async();\n    var timeoutId = null;\n\n    // handle stdout, stderr\n    if (!opts.quiet) {\n      proc.stdout.pipe(process.stdout);\n      proc.stderr.pipe(process.stderr);\n\n      proc.on('close', function () {\n        proc.stdout.unpipe(process.stdout);\n        proc.stderr.unpipe(process.stderr);\n      });\n    }\n\n    // handle errors that prevent the proc from starting\n    proc.on('error', function (err) {\n      grunt.log.error(err);\n    });\n\n    if (opts.wait) {\n      waitForProc();\n    } else {\n      trackBackgroundProc();\n\n      if (opts.ready instanceof RegExp) {\n        waitForReadyOutput();\n      } else if (opts.ready) {\n        waitForTimeout();\n      } else {\n        doNotWait();\n      }\n    }\n\n\n    // ensure that the streams are draining if we aren't already draining them (like quiet=true)\n    try {\n      proc.stdout.resume();\n      proc.stderr.resume();\n    } catch(e){\n      //node versions > 0.8 start streams in flow mode so resume will throw an error\n    }\n    return;\n\n    // we are waiting for the proc to close before moving on\n    function waitForProc() {\n      proc.on('close', function (exitCode) {\n        done(exitCode && new Error('non-zero exit code ' + exitCode));\n      });\n    }\n\n    // we aren't waiting for this proc to close, so setup some tracking stuff\n    function trackBackgroundProc() {\n      runningProcs.push(proc);\n      proc.on('close', function () {\n        _.pull(runningProcs, proc);\n        clearPid(name);\n        grunt.log.debug('Process ' + name + ' closed.');\n      });\n    }\n\n    // we are scanning the output for a specific regular expression\n    function waitForReadyOutput() {\n      function onCloseBeforeReady(exitCode) {\n        done(exitCode && new Error('non-zero exit code ' + exitCode));\n      }\n\n      var outputBuffer = '';\n\n      function checkChunkForReady(chunk) {\n        outputBuffer += chunk.toString('utf8');\n\n        // ensure the buffer doesn't grow out of control\n        if (outputBuffer.length >= opts.readyBufferLength) {\n          outputBuffer = outputBuffer.slice(outputBuffer.length - opts.readyBufferLength);\n        }\n\n        // don't strip ansi until we check, incase an ansi marker is split across chuncks.\n        if (!opts.ready.test(stripAnsi(outputBuffer))) return;\n\n        outputBuffer = '';\n        proc.removeListener('close', onCloseBeforeReady);\n        proc.stdout.removeListener('data', checkChunkForReady);\n        proc.stderr.removeListener('data', checkChunkForReady);\n        done();\n      }\n\n      proc.on('close', onCloseBeforeReady);\n      proc.stdout.on('data', checkChunkForReady);\n      proc.stderr.on('data', checkChunkForReady);\n    }\n\n    function waitForTimeout() {\n      timeoutId = setTimeout(function () {\n        grunt.log.ok(name + ' started');\n        done();\n      }, opts.ready);\n    }\n\n    function doNotWait() {\n      grunt.log.ok(name + ' started');\n      done();\n    }\n\n  });\n\n  grunt.task.registerMultiTask('stop', 'stop a process started with \"run\" ' +\n    '(only works for tasks that use wait:false)', function () {\n\n    var pid = this.data._pid;\n    var name = this.target;\n    var procs = _.where(runningProcs, { pid: pid });\n    clearPid(name);\n    if (procs.length) {\n      var done = this.async();\n      var counter = procs.length;\n      function closeHandler() {\n        if (--counter === 0) {\n          grunt.log.ok(name + ' stopped');\n          done();\n        }\n      }\n      procs.forEach(function(proc) {\n        proc.once('close', closeHandler);\n      });\n      _.invoke(procs, 'kill');\n    } else {\n      grunt.log.ok(name + ' already stopped');\n    }\n  });\n\n  grunt.task.registerMultiTask('wait', 'wait for a process started with \"run\" to close ' +\n    '(only works for tasks that use wait:false)', function () {\n\n    var pid = this.data._pid;\n    var proc = _.find(runningProcs, { pid: pid });\n    if (proc) {\n      proc.once('close', this.async());\n    } else {\n      grunt.log.writeln(this.target + ' (' + pid + ') is already stopped.');\n    }\n  });\n\n}\n"}